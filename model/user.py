from google.appengine.ext import ndb

import datetime
import random
import math

# Represents a user session
#
# This stores the user information / resources / stats for a given user
# during a game
class User(ndb.Model):

    # If the player doesn't specify their name, one will be
    # automatically generated by randomly selecting a first and last
    # name.
    #
    # EG: Pessimistic Wizard, Lazy Student, Incredible Bolt, etc...
    DEFAULT_FIRST_NAMES  = [
        'Red', 'Blue', 'Computer Science', 'Dark', 'Pessimistic',
        'Lazy', 'Yellow', 'Incredible'
    ]
    DEFAULT_SECOND_NAMES = ['Otter', 'Bolt', 'Student', 'Wizard']

    # These are the human readable names for the player's level
    LEVEL_NAMES = [
        "Hamlet", "Village", "Town", "City", "Metropolis", "Magapolis"
    ]

    # The user ID
    uid  = ndb.StringProperty()

    # The user's name (human readable)
    name = ndb.StringProperty()

    # The game this user is a member of
    gid  = ndb.StringProperty()

    # Map of their city
    homeMap = ndb.StringProperty()

    # Which tile their settlement is on
    positionOnMap = ndb.IntegerProperty()

    # The last time their values were updated
    lastUpdated = ndb.DateTimeProperty(auto_now_add=True)

    # If a building is being built at the moment, its name will be here
    buildingQueue = ndb.StringProperty()

    # The time that the building will have completed
    buildingFinish = ndb.DateTimeProperty()

    # What level their city has reached:
    #   0 = Hamlet
    #   1 = Village
    #   2 = Town
    #   3 = City
    #   4 = Metropolis
    #   5 = Magapolis
    level = ndb.IntegerProperty(default=1)

    # How much Gold the user has
    gold = ndb.FloatProperty(default=50)

    # How much Food the user has
    food = ndb.FloatProperty(default=200)

    # How much Wood the user has
    wood = ndb.FloatProperty(default=200)

    # How much Stone the user has
    stone = ndb.FloatProperty(default=200)

    # The level of their home
    homeLvl = ndb.IntegerProperty(default=1)

    # The number of people at the home
    peopleAtHome = ndb.IntegerProperty(default=50)

    # How many houses the player has
    houses = ndb.IntegerProperty(default=1)

    # Has this player got a trade centre?
    trade = ndb.BooleanProperty(default=False)

    # The number of people at the trade centre
    peopleAtTrade = ndb.IntegerProperty(default=0)

    # Has this player got a grapevine?
    grapevine = ndb.BooleanProperty(default=False)

    # The number of people at the grapevine
    peopleAtGrapevine = ndb.IntegerProperty(default=0)

    # Has this player got storage?
    storage = ndb.BooleanProperty(default=False)

    # The level of the storage
    storageLvl = ndb.IntegerProperty(default=1)

    # Has this player got a military centre?
    military = ndb.BooleanProperty(default=False)

    # The level of the military
    militaryLvl = ndb.IntegerProperty(default=1)

    # Number of people at the military centre
    peopleAtMilitary = ndb.IntegerProperty(default=0)

    # How many mines has this player got?
    mines = ndb.IntegerProperty(default=0)

    # There is a chance that a mine will yield gold. How many gold mines
    # has the user got?
    goldMines = ndb.IntegerProperty(default=0)

    # The level of the mines
    mineLvl = ndb.IntegerProperty(default=1)

    # Number of people at the mines
    peopleAtMine = ndb.IntegerProperty(default=0)

    # How many lumberjacks has this player got?
    lumberjacks = ndb.IntegerProperty(default=0)

    # The level of the lumberjacks
    lumberjackLvl = ndb.IntegerProperty(default=1)

    # Number of people at the lumberjacks
    peopleAtLumberjack = ndb.IntegerProperty(default=0)

    # How many docks has this player got?
    docks = ndb.IntegerProperty(default=0)

    # The level of the docks
    dockLvl = ndb.IntegerProperty(default=1)

    # Number of people at the docks
    peopleAtDock = ndb.IntegerProperty(default=0)

    # Sets the lastUpdated property with the current datetime. It also
    # calculates the number of seconds since the last update
    def updateValues(self, update):
        
        # There's a building that has finished in the time we're talking
        # about to consider
        if self.buildingQueue and self.getBuildFinished() <= 0:
            self.addBuilding()
        
        # Calculate the change of resources since now and the time we
        # were last updated
        dt = datetime.datetime.now()
        self.runUpdate((dt - self.lastUpdated).total_seconds())

        self.lastUpdated = dt

        if update: self.put()

    # Calculates the change in recources since now and the time a
    # building was completed then adds the building
    def addBuilding(self):

        # Calculate the resouces changes
        delta = self.buildingFinish - self.lastUpdated
        self.runUpdate(delta.total_seconds())

        # Update the building queue, saving the building name
        building            = self.buildingQueue
        self.lastUpdated    = self.buildingFinish
        self.buildingQueue  = None
        self.buildingFinish = None

        # Trade, military and storage are limited to one, so are stored
        # as booleans
        if building in ['trade', 'storage', 'military', 'grapevine']:
            setattr(self, building, True)
        # Everything else has variable numbers, so get the current
        # number and add one to it
        else:
            building = building + 's'
            setattr(self, building, getattr(self, building) + 1)

    # Calculates the resource gains in the given amount of time and adds
    # these to the user's account
    def runUpdate(self, secs):
        self.food +=                                     \
              (self.peopleAtDock * self.level)           \
            * secs / 60.0
        self.food +=                                     \
              (self.peopleAtGrapevine * self.level)      \
            * secs / 60.0
        self.wood +=                                     \
              (random.randrange(1, 19) / 10.0) * 0.3     \
            * self.lumberjackLvl                         \
            * self.peopleAtLumberjack                    \
            * self.lumberjacks                           \
            * secs / 60.0
        self.stone +=                                    \
              (random.randrange(1, 19) / 10.0) * 0.3     \
            * self.mineLvl                               \
            * self.peopleAtMine                          \
            * self.mines                                 \
            * secs / 60.0
        self.gold +=                                     \
              (random.randrange(1, 19) / 10.0) * 0.3     \
            * self.mineLvl                               \
            * self.peopleAtMine                          \
            * self.goldMines                             \
            * secs / 60.0

    # The Building Finished time is stored in the database as a
    # timestamp. This takes a value in seconds and creates a timestamp
    # from it it, x seconds away from now
    def setBuildFinished(self, secs):
        self.buildingFinish = \
            self.lastUpdated + datetime.timedelta(seconds = secs)

    # Returns the number of seconds until the building in the build
    # queue is complete
    def getBuildFinished(self):
        dt = datetime.datetime.now()
        return (self.buildingFinish - dt).total_seconds()

    # Takes a game object as created / returned from the database, and
    # converts it into a dict, with only public facing properties being
    # added
    def toDict(self):
        return {
            "level" : User.LEVEL_NAMES[self.level - 1],
            "position" : self.positionOnMap,
            "resources" : {
                "gold"  : math.floor(self.gold),
                "food"  : math.floor(self.food),
                "wood"  : math.floor(self.wood),
                "stone" : math.floor(self.stone)
            },
            "buildings" : {
                "home"        : {
                    "num"    : 1,
                    "level"  : self.homeLvl,
                    "people" : self.peopleAtHome
                },
                "house"       : {
                    "num" : self.houses
                },
                "trade"       : {
                    "num"    : 1 if self.trade else 0,
                    "people" : self.peopleAtTrade
                },
                "grapevine"   : {
                    "num"    : 1 if self.grapevine else 0,
                    "people" : self.peopleAtGrapevine
                },
                "storage"    : {
                    "num"   : 1 if self.storage else 0,
                    "level" : self.storageLvl
                },
                "military"    : {
                    "num"    : 1 if self.military else 0,
                    "level " : self.militaryLvl,
                    "people" : self.peopleAtMilitary
                },
                "mine"        : {
                    "num"    : self.mines,
                    "level"  : self.mineLvl,
                    "people" : self.peopleAtMine
                },
                "lumberjack"  : {
                    "num"    : self.lumberjacks,
                    "level"  : self.lumberjackLvl,
                    "people" : self.peopleAtLumberjack
                },
                "dock"        : {
                    "num"    : self.docks,
                    "level"  : self.dockLvl,
                    "people" : self.peopleAtDock
                }
            }
        }